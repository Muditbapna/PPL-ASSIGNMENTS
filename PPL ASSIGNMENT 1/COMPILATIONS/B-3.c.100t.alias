
;; Function main (main, funcdef_no=13, decl_uid=3219, cgraph_uid=13, symbol_order=13) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
b_4 = b_2
b_4 = &NONLOCAL
a_5 = a_1
a_5 = &NONLOCAL
a_1 = &NONLOCAL
a_1 = a_5
b_2 = b_3
b_2 = b_4
ESCAPED = &STRING
ESCAPED = &NONLOCAL
ESCAPED = b_2
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
printf = { }
b_4 = { NONLOCAL }
b_2 = { NONLOCAL } same as b_4
a_5 = { NONLOCAL } same as b_4
a_1 = { NONLOCAL } same as b_4
b_3 = { }


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


main ()
{
  int b;
  int a;

  <bb 2> [local count: 11059541]:
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 1062682283]:
  b_4 = b_2 * 2;
  a_5 = a_1 + 1;

  <bb 4> [local count: 1073741825]:
  # a_1 = PHI <4(2), a_5(3)>
  # b_2 = PHI <b_3(D)(2), b_4(3)>
  if (a_1 <= 99)
    goto <bb 3>; [98.97%]
  else
    goto <bb 5>; [1.03%]

  <bb 5> [local count: 11059541]:
  printf ("%d%d", 100, b_2);
  return 0;

}


