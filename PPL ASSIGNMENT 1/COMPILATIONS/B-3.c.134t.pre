
;; Function main (main, funcdef_no=13, decl_uid=3219, cgraph_uid=13, symbol_order=13) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a_12 = &NONLOCAL
a_12 = a_5
b_13 = b_3
b_13 = b_4
b_4 = b_13
b_4 = &NONLOCAL
a_5 = a_12
a_5 = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NONLOCAL
ESCAPED = b_4
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
printf = { }
a_12 = { NONLOCAL }
a_5 = { NONLOCAL } same as a_12
b_13 = { NONLOCAL } same as a_12
b_3 = { }
b_4 = { NONLOCAL } same as a_12


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 5 4
;;
;; Loop 1
;;  header 3, latch 5
;;  depth 1, outer 0
;;  nodes: 3 5
;; 2 succs { 3 }
;; 3 succs { 5 4 }
;; 5 succs { 3 }
;; 4 succs { 1 }
main ()
{
  int b;
  int a;

  <bb 2> [local count: 11059541]:

  <bb 3> [local count: 1062682284]:
  # a_12 = PHI <4(2), a_5(5)>
  # b_13 = PHI <b_3(D)(2), b_4(5)>
  b_4 = b_13 * 2;
  a_5 = a_12 + 1;
  if (a_5 != 100)
    goto <bb 5>; [98.96%]
  else
    goto <bb 4>; [1.04%]

  <bb 5> [local count: 1051622743]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 11059541]:
  printf ("%d%d", 100, b_4);
  return 0;

}


